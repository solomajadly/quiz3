#include <memory>
#include <vector>
#include "gtest/gtest.h"
#include "shape.h"

const float PI = 3.14159265f;

TEST(Shps, DrawTriangle) {
  Trg c{1.0f};
  EXPECT_EQ("drew a Trg", c.draw());
}

TEST(Shps, DrawSquare) {
  Sq s{1.0f};
  EXPECT_EQ("drew a Sq", s.draw());
}

TEST(ShpPtr, DrawSquare) {
  // change this to make the test pass
  std::shared_ptr<Shp> s = nullptr;
  s = std::make_shared<Sq>(1);

  EXPECT_EQ("drew a Sq", s->draw());
}

TEST(Shps, BunchOfSquaresArea) {
  // change these to make the test pass
  std::shared_ptr<Shp> sq_ptr1 = nullptr;
  std::shared_ptr<Shp> sq_ptr2 = nullptr;
  std::shared_ptr<Shp> sq_ptr3 = nullptr;

  sq_ptr1 = std::make_shared<Sq>(2);
  sq_ptr2 = std::make_shared<Sq>(2);
  sq_ptr3 = std::make_shared<Sq>(2);

  EXPECT_FLOAT_EQ(12.0f, sq_ptr1->area() + 
		  sq_ptr2->area() + sq_ptr3->area());
}

TEST(Shps, BunchOfTrianglesArea) {
  // change these to make the tests pass.
  std::shared_ptr<Shp> c_ptr1 = nullptr;
  std::shared_ptr<Shp> c_ptr2 = nullptr;
  std::shared_ptr<Shp> c_ptr3 = nullptr;


  c_ptr1 = std::make_shared<Trg>(2);
  c_ptr2 = std::make_shared<Trg>(2);
  c_ptr3 = std::make_shared<Trg>(2);

  EXPECT_FLOAT_EQ(6.0f, c_ptr1->area() + 
		  c_ptr2->area() + c_ptr3->area());
}

TEST(Shps, DifferentShps) {
  // change the assignments so that the test becomes true.
  std::shared_ptr<Shp> sq_ptr1 = nullptr; 
  std::shared_ptr<Shp> c_ptr1 = nullptr;
  std::shared_ptr<Shp> c_ptr2 = nullptr;

  sq_ptr1 = std::make_shared<Sq>(2);
  c_ptr1 = std::make_shared<Trg>(3);
  c_ptr2 = std::make_shared<Trg>(1);

  EXPECT_FLOAT_EQ(2.0 * 2.0 + 3.0f * 3.0f * 0.5 + 0.5f,
		  sq_ptr1->area() + c_ptr1->area() + c_ptr2->area());
}

TEST(ShpVec, AreasSumCorrectly) {
  std::vector<std::shared_ptr<Shp> > drawingBoard{6};

  // TODO Add three unit circles to the drawingBoard.
  drawingBoard[0] = std::make_shared<Trg>(1);
  drawingBoard[1] = std::make_shared<Trg>(1);
  drawingBoard[2] = std::make_shared<Trg>(1);

  // TODO Add three unit squares to the drawingBoard
  drawingBoard[3] = std::make_shared<Sq>(1);
  drawingBoard[4] = std::make_shared<Sq>(1);
  drawingBoard[5] = std::make_shared<Sq>(1);

  float areas = 0.0f;
  for (const auto& s : drawingBoard) {
    areas += s->area();
  }

  EXPECT_FLOAT_EQ(1.5f + 3.0f, areas);
}
